export http_proxy="http://wwwproxy.se.axis.com:3128"
export HTTP_PROXY="${http_proxy}"

export ftp_proxy="http://wwwproxy.se.axis.com:3128"
export FTP_PROXY="${ftp_proxy}"

export https_proxy="http://wwwproxy.se.axis.com:3128"
export HTTPS_PROXY="${https_proxy}"

export no_proxy=localhost,127.0.0.1,127.0.1.1,.localdomain,axis.com

# export ftp_proxy="ftp://ftp-proxy.se.axis.com:4514/"
# export FTP_PROXY="ftp://ftp-proxy.se.axis.com:4514/"
# export socks_proxy="socks://socks.axis.com:1080/"
# export SOCKS_PROXY="socks://socks.axis.com:1080/"

# source to give access to build tools functions
source ~/development/axis/oe-setup/oe-setup.sh

function ssh_192_168_0_90() {
  # TODO instead scp file
  function sshx() {
    local l_user="root"
    local l_pass="pass"
    local l_ip="192.168.0.90"

    local l_env_setup='ENV=$HOME/.shinit; export ENV;'
    local l_env=''
    l_env+='echo "alias vim=vi" > $HOME/.shinit'
    l_env+=' && echo "alias ll=\"ls -alh\"" >> $HOME/.shinit'
    l_env+=' && echo "alias systemctl_status=\"systemctl status audiocontrol monolith parhand ioboxd\"" >> $HOME/.shinit'
    l_env+=' && echo "alias systemctl_root=\"cd /usr/lib/systemd/system\"" >> $HOME/.shinit'
    l_env+=' && echo "alias tree=\"ls -alhR1\"" >> $HOME/.shinit'

  # sshpass -p "${l_pass}" ssh -t ${l_user}@${l_ip} 'alias ll="ls -alh";ll; exec /bin/sh -l' # 'alias ll="ls-alh"; /bin/sh -l'
    sshpass -p "${l_pass}" ssh -t ${l_user}@${l_ip} "${l_env_setup} ${l_env}; exec /bin/sh -l"
    return $?
  }

  sshx
  local res=$?
  echo "res: $res"
  if [ $res -eq 127 ]; then
    echo ""
  # elif [ $res -eq 255 ]; then
  #   echo ""
  elif [ ! $res -eq 0 ]; then

    $HOME/development/axis/tpp/ff enable-ssh
    if [ $? -eq 0 ]; then
      sshx
    fi
  fi
}


function scp_192_168_0_90() {
  local l_user="root"
  local l_pass="pass"
  local l_ip="192.168.0.90"

  local l_source="$1"
  local l_remote_dest="$2"
  if [ ! -e "${l_source}" ]; then
    echo "not existing src: '${l_source}'"
    return 1
  fi

  sshpass -p "${l_pass}" scp "${l_source}" "${l_user}"@"${l_ip}":"${l_remote_dest}"
}

function scp_crashdump_192_168_0_90(){
  local l_user="root"
  local l_pass="pass"
  local l_ip="192.168.0.90"

  local l_source='/var/spool/storage/SD_DISK/dumps/*'
  local l_dest="~/development/crashdump/"

  echo "sshpass -p ${l_pass} scp ${l_user}@${l_ip}:${l_source} ${l_dest}"
  sshpass -p "${l_pass}" scp "${l_user}"@"${l_ip}":"${l_source}" "${l_dest}"
}

# function crashdump_gdb_(){
#   if [ ! -n "${BUILDDIR}" ]; then
#     echo "Must be run from oe-initenv shell">&2
#     return 1
#   fi
#
#   function get_build(){
#     # BUILDDIR=/home/fredriol/dists/m3047-iobox-duo-sound/builds/m3047-p
#   }
# # $BUILDDIR
# }

function deploy_192_168_0_90(){
  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi

  local project="${1}"
  local project_dir="${BUILDDIR}/workspace/sources/${project}"

  if [ ! -e "${project_dir}" ]; then
    echo "'$project_dir' does not exist" >&2
    return 1
  fi

  if [ "${project}" != "ioboxd" ]; then
    echo "only ioboxd supported" >&2
    return 1
  fi


  echo "devtool build ${project}"
  # devtool build "${project}"
  if [ ! $? -eq 0 ]; then
    return 1
  fi

  local l_user="root"
  local l_pass="pass"
  local l_ip="192.168.0.90"

  local l_source="${project_dir}/${project}"
  local l_dest=1"/usr/bin/ioboxd"

  $HOME/development/axis/tpp/ff :remount
  if [ ! $? -eq 0 ]; then
    return 1
  fi

  sshpass -p "${l_pass}" scp "${l_source}" "${l_user}"@"${l_ip}":"${l_dest}"
  local res=$?
  if [ ! $res -eq 0 ]; then
    return $res
  fi

  sshpass -p "${l_pass}" ssh -t ${l_user}@${l_ip} "systemctl restart ioboxd"
}

function rtags_all(){
  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi

  local sources="${BUILDDIR}/workspace/sources"

  for f in "${sources}"/*; do
    if [ -d "${f}" ]; then
      local git_root="${f}/.git"

      if [ -e "${git_root}" ]; then

        echo "# $(dirname ${f})"
        $HOME/dotfiles/lib/bitbake_rtags.sh "${f}"
      else

        echo "should be a git repo: '$git_root'" >&2
        return 1
      fi
    fi
  done

  date
}

function modify_all() {
  which devtool > /dev/null
  if [ ! $? -eq 0 ]; then
    echo "devtool is not in path" >&2
    return 1
  fi

  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi

  local dist_root="${BUILDDIR}/../.."
  local lwd="$(pwd)"

  if [ ! -e "${dist_root}/.git" ]; then
    echo "Is not a repo">&2
    return 1
  fi

  local proj=(audiocontrol  audiocontrol-conf  audio-params  audio-properties  ioboxd  linux-axis  modscpu-public  monolith  parhand  parhandclient  portcast-properties)
  for cur in "${proj[@]}"; do
    devtool modify "$cur"
    if [ $? -eq 0 ];then
      cd "${dist_root}"
      git add .
      git commit -m "$cur"
      cd "${lwd}"
    fi
  done
}

# function deploy_target_192_168_0_90() {
#   local l_user="root"
#   local l_pass="pass"
#   local l_ip="192.168.0.90"
#
#   local l_project="$1"
#
#   has_feature devtool
#   if [ ! $? -eq 0 ]; then
#     echo "need to run from a oe-initenv enviornment"
#     return 1
#   fi
#
#   devtool deploy-target "${l_project}" "${l_user}"@"${l_ip}" -s --no-check-space
#
# # $HOME/development/axis/tpp/ff enable-ssh
# }

function flash_192_168_0_90_ftp() {
  local l_user="root"
  local l_pass="pass"
  local l_ip="192.168.0.90"
  local l_image="./fimage"

  if [[ -n "${1}" ]]; then
    local l_image="${1}"
  elif [[ -n "${BUILDDIR}" ]]; then
    local l_image="${BUILDDIR}/fimage"
  fi

  if [ ! -e "${l_image}" ]; then
    notify-send "ERROR missing '${l_image}'"
    echo "missing '${l_image}'" >&2
    return 1
  fi

  if [ ! -f "${l_image}" ]; then
    notify-send "ERROR not a file '${l_image}'"
    echo "not a file '${l_image}'" >&2
    return 1
  fi

  date
  echo "flashing '${l_image}'"

  # ftp -u ftp://${l_user}:${l_pass}@${l_ip}/flash_all ${l_image}
  # if [ ! $? -eq 0 ]; then
    $HOME/development/axis/tpp/ff enable-ftp
    local ret=$?
    if [ ${ret} -eq 0 ]; then
      sleep 2s
      ftp -u ftp://${l_user}:${l_pass}@${l_ip}/flash_all ${l_image}
      local ret=$?
      if [ ${ret} -eq 0 ]; then
        notify-send "flashing ${l_ip} [DONE]" "${l_image} [DONE]"
      else
        notify-send "flashing ${l_ip} [FAILED]" "${l_image} [FAILED]"
      fi
    fi
  # fi

  date
  return ret
}

function netboot_192_168_0_90(){
  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi

  local l_image="${BUILDDIR}/fimage"
  local l_machine="$(basename ${BUILDDIR})"

  if [ ! -e ${l_image} ]; then
    notify-send "ERROR missing '${l_image}'"
    echo "missing '${l_image}'" >&2
    return 1
  fi

  local l_marker="${BUILDDIR}/spmarker"
  if [[ -e "${l_marker}" ]]; then
    local l_machine="$(cat ${l_marker})"
  fi

  echo "machine '${l_machine}'"
  if [[ "${l_machine}"="m3066-v" ]]; then
    $HOME/development/axis/tpp/ff enable-ssh
    sleep 1s
    $HOME/development/axis/tpp/ff :netboot
    sleep 1s
    boot_axis -F -i "${l_image}" -W 7AC -v
    local ret=$?
  elif [[ "${l_machine}"="m3075-v" ]]; then
    $HOME/development/axis/tpp/ff enable-ssh
    sleep 100ms
    $HOME/development/axis/tpp/ff :netboot
    sleep 1s
    boot_axis -F -i "${l_image}" -W 7AD -v
    local ret=$?
  else
    notify-send "unknow machine '${l_machine}' [FAILED]" "[FAILED]"
    echo "unknow machine '${l_machine}'">&2
    return 1
  fi

  if [ ${ret} -eq 0 ]; then
    notify-send "netboot ${l_machine} [DONE]" "${l_image} [DONE]"
  else
    notify-send "netboot ${l_machine} [FAILED]" "${l_image} [FAILED]"
  fi

  date
  return ret
}

function bitbake_axis-image-cvp() {
  # TODO time
  date
  bitbake axis-image-cvp
  local ret=$?
  if [ ${ret} -eq 0 ]; then
    notify-send "Build [SUCCESS]"
  else
    notify-send "Build [FAILED]"
  fi
  date

  return $ret
}

function bitbake_sources_clean() {
  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi
  local l_workspace="${BUILDDIR}/workspace/sources"

  if [ ! -e ${l_workspace} ]; then
    echo "${l_workspace} does not exist">&2
    return 2
  fi

  echo "bitbake -c clean $(cd ${l_workspace}; ls -d -- */ | tr '/' ' ' | xargs)">&2

  bitbake -c clean $(cd ${l_workspace}; ls -d -- */ | tr '/' ' ' | xargs)
  return $?
}

function entr_devtool_build(){
  if [ ! -n "${BUILDDIR}" ]; then
    echo "Must be run from oe-initenv shell">&2
    return 1
  fi

  # TODO $BUILDDIR assert that it is the prefix of $(pwd) everywhere where $BUILDDIR is used
  local project="${1}"
  local l_workspace="${BUILDDIR}/workspace/sources/${project}"

  if [ ! -e "${l_workspace}" ]; then
    echo "missing worksapce '${l_workspace}'">&2
    return 1
  fi

  ack -f --cpp --ignore-dir=oe-workdir --ignore-dir=oe-logs -r "${l_workspace}" | entr "${HOME}/dotfiles/lib/devtool_build.sh" "${project}"
}

function env_setup() {
  local l_args="${@}"

  # -w DIR, --workdir DIR the work directory to setup

  getopt --test
  if [[ $? -ne 4 ]]; then
    echo "I’m sorry, `getopt --test` failed in this environment."
    return 1
  fi

  local l_options="w:m:g:j:"
  local l_longopts="workdir:,manifest-branch:,groups:,jobs:"

  # -use ! and PIPESTATUS to get exit code with errexit set
  # -temporarily store output to be able to check for errors
  # -activate quoting/enhanced mode (e.g. by writing out “--options”)
  # -pass arguments only via   -- "$@"   to separate them correctly
  ! PARSED=$(getopt --options=$l_options --longoptions=$l_longopts --name "$0" -- "$@")
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    return 2
  fi
  # read getopt’s output this way to handle the quoting right:
  eval set -- "$PARSED"

  local l_workdir=

  while true; do
    case "$1" in
      -w|--workdir)
        # echo "workdir $2"
        l_workdir="${2}"
        shift 2
        ;;
      -m|--manifest-branch)
        shift 2
        ;;
      -g|--groups)
        shift 2
        ;;
      -j|--jobs)
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
      echo "spooky Unknown argument"
      return 3
      ;;
    esac
  done

  if [[ -z "${l_workdir}" ]]; then
    echo "workspace is not set"
    return 4
  fi

  if [[ -e "${l_workdir}" ]]; then
    echo "worksapce already exist '${l_workdir}'"
    return 5
  fi

  "${l_args}"
  if [[ ! $? -eq 0 ]]; then
    return $?
  fi

  if [[ ! -e "${l_workdir}" ]]; then
    echo "worksapce does not exist '${l_workdir}'"
    return 6
  fi

  if [[ "$(readlink -f ${l_workdir})" != "$(pwd)" ]]; then
    echo "'$(readlink -f ${l_workdir})' missmatch '$(pwd)'"
    return 7
  fi

  git init
  cp ~/Dropbox/axis/gitignore .gitignore
  git add .
  git commit -m "initial"
}

# setxkbmap -option caps:escape

# release shares (daily build?)

# /n/axis_releases/oe/m3048-p/CVP/18.45.5_1
# share:
# /n/slask/fredriol
# \\storage03\n_slask\fredriol

# vim: set ft=zsh:
