[general]
accounts = work,Gmail
ui = ttyui
fsync = False
socktimeout = 60
pythonfile = ~/dotfiles/lib/keyring-helper.py
autorefresh = 5
sslcacertfile = /etc/ssl/certs/ca-certificates.crt

#------------------------------------------
#------------------------------------------

[Account Gmail]
localrepository = Gmail-Local
remoterepository = Gmail-Remote
synclabels = yes

[Repository Gmail-Local]
type = GmailMaildir
localfolders = ~/.mail/gmail

[Repository Gmail-Remote]
type = Gmail
auth_mechanisms = XOAUTH2
oauth2_client_ideval = get_password("personal", "client-oauth-id")
oauth2_client_secret = get_password("personal", "client-oauth-secret")
# Access tokens have limited lifetimes.
# If your application needs access beyond the lifetime of a single access token, it can obtain a refresh token.
oauth2_refresh_torken = get_password("work", "client-oauth-refresh-token")
realdelete = no
ssl = yes
maxconnections = 3
sslcacertfile = /etc/ssl/certs/ca-certificates.crt

#------------------------------------------
#------------------------------------------

[Account work]
localrepository = work-local
remoterepository = work-remote
status_backend = sqlite
#postsynchook = notmuch new

[Repository work-local]
type = Maildir
localfolders = ~/.mail/work
nametrans = lambda folder: {'inbox': 'INBOX',
														'Sent Items': 'Sent Items',
														'Sent_Items': 'Sent Items'
                            }.get(folder, folder)

[Repository work-remote]
maxconnections = 4
type = IMAP
ssl = yes
sslcacertfile = ~/.mutt/certificates/cacert.pem
# note: eval invokes py function
remotehosteval = get_password("work", "host")
remoteusereval = get_password("work", "email")
remotepasseval = get_password("work", "password")
remoteporteval = get_password("work", "port")
nametrans = lambda folder: {'INBOX': 'inbox',
                            'elx': 'elx',
														'Sent Items': 'Sent_Items',
                        #    'Sent Items': 'Sent Items',
                        #    'errors': 'errors',
                        #    'github': 'github',
                        #    'archive': 'archive',
                        #    'cron': 'cron',
                        #    'chef_run_failed': 'chef_run_failed',
                            }.get(folder, folder)
folderfilter = lambda folder: folder.startswith('INBOX') or folder in ['Sent Items','Drafts']
#, 'errors', 'github', 'archive', 'cron', 'chef_run_failed'

# Or, if you have a lot of mail and don't want to wait for a long time before
# using sup, you can archive all your old mails on Gmail and only sync the
# inbox with the following line replacing the previous `folderfilter` line:
# folderfilter = lambda folder: folder == 'INBOX'
