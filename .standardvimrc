" Turn off vi compatibility.(sould be set first)
set nocompatible

" encoding {{{
set encoding=utf-8      " The encoding used
set fileencoding=utf-8  " The encoding of the resulting output file
scriptencoding utf-8
" }}}

if has('gui_running')
  " configure font and font size for gvim
  set guifont=Consolas:h9

  " a gui pops up allowing you to configure font, size...
  " set guifont=*
endif

" if $TERM == "xterm-256color"
" endif

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal" || $TERM == "urxvt" || $TERM == "tmux-256color" || has('nvim')
  set t_Co=256
  if has('nvim') || has('termguicolors')
    " :h xterm-true-color
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    " :h termguicolors
    " guibg and guifg are defined also in terminal Vim used by colorscheme
    set termguicolors
  endif
endif

if v:version > 703 || v:version == 703 && has('patch541') || has('nvim')
  " Fixes joining comment lines
  set formatoptions+=j
endif

"
filetype on                       " Enable file type detection
filetype plugin on                " Enable file type plug-ins
filetype indent plugin on         " file type specific indentation support + loading language indentation specific files

" General {{{
let mapleader = "\<Space>"        " map leader to  <space>
" set mouse=a                     " Enables scrolling terminal.(mouse mode)
set pastetoggle=<f5>              " vim will not perform any formatting when toggled on
" }}}
" UI {{{
set ruler                         " Display the ruler
set showcmd                       " Show incomplete vim motions as I type
set relativenumber                " Relative line numbers
set number                        " Relative + Absolute number
set lazyredraw                    " don't bother updating screen during macro playback
" set showmatch                     " blink matching [{()}] on insert
set title                         " change the terminal's title

set novisualbell                  " don't beep
set noerrorbells                  " don't beep

set splitright                    " open new pane to the right

set scrolloff=2                   " keep at least N lines above/below when scrolling

" if !has('win32unix') && !has('win64unix')
  " does not work in cygwin
  set ttyfast                     " Faster redraw
" endif

" Highlight current line
" Enable cursorline only on the active buffer
augroup AutogroupCursorLine
    "https://stackoverflow.com/a/12018552
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}

" syntax {{{
syntax enable                     " Highlight the syntax.
" }}}

" folding {{{
set nofoldenable                  " disable folding
" }}}

" gvim {{{
" hide all gui
set guioptions=
" }}}

" command(:) {{{
set history=1000                 " remember more commands and search history
set wildmode=longest:full,full   " bash like command(:) completion when tab
set wildmenu                     " Show command(:) completion with tab

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

" ignore these files when :edit <tab>
set wildignore=*.swp,*.bak,*.pyc,*.exe,*.dat,*.bin,*.out,*.pdf,*.cache,*.part
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.d,main,*.o,*.a,*.stackdump,*.so
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.mkv,*.mp4
set wildignore+=*.class,*.jar
set wildignore+=*.zip,*.tar,*.tar.gz
set wildignore+=GPATH,GRTAGS,GTAGS

set wildignore+=*/.git,*/.hg,*/.svn
set wildignore+=tags,*.tags

set wildignore+=external/googletest/*
set wildignore+=*external/googletest/*
set wildignore+=*/external/googletest/*

set wildignore+=external/googletest*
set wildignore+=*external/googletest*
set wildignore+=*/external/googletest*

set wildignore+=external/googletest
set wildignore+=*external/googletest
set wildignore+=*/external/googletest

set wildignore+=external/googletest/
set wildignore+=*external/googletest/
set wildignore+=*/external/googletest/

set wildignore+=external/googletest/**
set wildignore+=*external/googletest/**
set wildignore+=*/external/googletest/**

set wildignore+=external/googletest**
set wildignore+=*external/googletest**
set wildignore+=*/external/googletest**
"","build/**","build_test/**"
" let g:CommandTWildIgnore=&wildignore . ",external/googletest/**"

" set wildignore+=
" }}}


augroup AutogroupRememberFilePosition
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

if has('win32unix') || has('win64unix')
  " cursor shape
  " https://github.com/mintty/mintty/wiki/Tips
  let &t_ti.="\e[1 q"           " put terminal in termcap mode
  let &t_SI.="\e[5 q"           " Start insert mode
  let &t_EI.="\e[1 q"           " End insert or replace mode
  let &t_te.="\e[0 q"           " out of termcap mode

  let &t_ti.="\e[?7727h"
  let &t_te.="\e[?7727l"
  " noremap <Esc>O[ <Esc>
  " noremap! <Esc>O[ <C-c>

endif

" ttimout ==keycode timeout
" timout == mapping timeout
" Get rid of nasty lag on ESC (timeout and ttimeout seem useless) sp??
augroup AutogroupEscapeLag
  autocmd!
  au InsertEnter * set timeoutlen=1
  au InsertLeave * set timeoutlen=1000
augroup END
set timeoutlen=1000 ttimeoutlen=0
" set esckeys " A <esc> is always a <esc> not part a escape sequence(used by older terminals?)

" Blank charcters {{{
" debug set with "set list?" ?: means print current value
set list                              " show special chars, such as tab: eol: trail: extends: nbsp:

" chars to show for blank characters
set listchars=tab:\ \ 
" set listchars+=tab:·»
" set listchars+=eol:¬
set listchars+=trail:·
set listchars+=nbsp:+

" set showbreak=↪\
" char to display when softwrapping
set showbreak="\u21aa"
" }}}

" {{{
augroup AutogroupFileSpecific
  autocmd!

  " manually set filetype based on ext
  autocmd BufNewFile,BufFilePre,BufRead *.md set ft=markdown
  autocmd BufNewFile,BufRead *.nasm set ft=nasm

  " type specific settings
  " autocmd FileType markdown,python setlocal ts=2 sw=2 expandtab
  autocmd FileType gitcommit,markdown,text,mail,tex setlocal textwidth=80
  autocmd FileType gitcommit,markdown,text,mail,tex setlocal colorcolumn=-1   " display bar at textwidth
  autocmd FileType gitcommit,markdown,text,mail setlocal complete+=kspell
" enable spelling for these types
  autocmd FileType gitcommit,mail setlocal spell

  " set file type for files without extension like <atomic>
  autocmd BufRead,BufNewFile /usr/include/c++/* set ft=cpp
  autocmd BufRead,BufNewFile /usr/lib/gcc/* set ft=cpp

augroup END
" }}}


" Search {{{
set incsearch                     " search wile you type
set smartcase                     " Case insensitive search, except when capital letters are used.
set ignorecase                    " ignore case when searching
set hlsearch                      " highlight search result
" }}}

" Visual mode {{{
" move up/down by visual line, will treat wrapped lines as real lines
nnoremap j gj
nnoremap k gk
" }}}

" Spell {{{
map <silent><f6> <esc>:setlocal spell!<CR>
map zn ]s
map zp [s
map zN [s
" map <leader>sa zg
" map <leader>sq z=
" Drop down menu with spell corrections
nnoremap <leader>z ea<C-X><C-S>

" underline wrongly spelled words
hi clear SpellBad
hi SpellBad cterm=underline

set spelllang=en_gb               " Specify the spell checking language.
set nospell                       " Disable spell checking by default.
set dictionary+=/usr/share/dict/words
" Own spell db
set spellfile=~/.vim/spell/en.utf-8.add

iab acomplished accomplished
iab affectlivy affectively
iab avilable available
iab abreviate abbreviate
iab achives achieves
iab absoloutly absolutely
iab adjasent adjacent
iab advandatges advantages
iab Advandatges Advantages
iab afer after
iab aggreeing agreeing
iab algoithm algorithm
iab algorihm algorithm
iab allready already
iab allways always
iab alot allot
iab anounce announce
iab apend append
iab aquire acquire
iab arbritrary arbitrary
iab artices articles
iab aswell as well
iab atleast at least
iab atomicly atomically
iab autocompleteion autocompletion
iab beacuse because
iab beahviour behaviour
iab biset bitset
iab bootstraping bootstrapping
iab changeing changing
iab charactor character
iab closenes closeness
iab coalecse coalesce
iab coaless coalesce
iab coalessce coalesce
iab coalesse coalesce
iab coalessed coalesced
iab configred configured
iab compareing comparing
iab comparision comparison
iab compatability compatibility
iab completeion completion
iab considure consider
iab continuasly continuously
iab controll control
iab conuccrency concurrency
iab conestexpr constexpr
iab coresponding corresponding
iab corresponing corresponding
iab defein define
iab defien define
iab deque dequeue
iab dequed dequeued
iab dequeing dequeuing
iab desiding deciding
iab enque enqueue
iab enqued enqueued
iab enquing enqueuing
iab entrie entry
iab everyting everything
iab exapndable expandable
iab exclusve exclusive
iab exclusve exclusive
iab Exclusve Exclusive
iab Exlcusive Exclusive
iab explict explicit
iab externaly externally
iab fasle false
iab flase false
iab fro for
iab fullfill fulfil
iab haveing having
iab hegiher higher
iab heigher higher
iab highligt highlight
iab immediatly immediately
iab inbetwen in-between
iab increse increase
iab indecies indices
iab infront in front
iab initialy initially
iab interfereing interfering
iab invoce invoke
iab invoces invokes
iab itterating iterating
iab itteration iteration
iab itterations iterations
iab itterated iterated
iab itterates iterates
iab keept kept
iab lengh length
iab lengt length
iab liklyhood likelihood
iab malicous malicious
iab meaining meaning
iab namesapce namespace
iab nessesarly necessarily
iab nessesary necessary
iab nessessary necessary
iab noxcept noexcept
iab ovrride override
iab ovrrides overrides
iab paralell parallel
iab possitive positive
iab possitve positive
iab possitves positives
iab prefere prefer
iab prinf printf
iab privous previous
iab probobly probably
iab publlic public
iab ranomize randomize
iab realy really
iab rebalace rebalance
iab rebalanceing rebalancing
iab rebalnce rebalance
iab reclmataion reclamation
iab recuirsive recursive
iab recurisvly recursively
iab recurivly recursively
iab recursivily recursively
iab recursivly recursively
iab recycked recycled
iab referecnes references
iab refered referred
iab refrence reference
iab refrenced referenced
iab refrences references
iab renmae rename
iab represnetation representation
iab routign routing
iab staticts statistics
iab subsicently subsequently
iab sufficent sufficient
iab surten certain
iab teh the
iab therefor therefore
iab thresshold threshold
iab timedout timed out
iab tradeoff trade-off
iab uppwards upwards
iab utillity utility
iab wehn when
iab wheter whether
iab wich which
iab separtly separately
iab entires entries

iab predessessor predecessor
iab predeccsessor predecessor
iab beacause because
iab chanse chance
iab beinning beginning
iab begining beginning
iab verticly vertically
iab succesfull successful
iab inorder in order
iab remvoe remove
iab allignment alignment
iab theorum theorem
iab theorum theorem
iab statefull stateful
iab otherwsie otherwise
iab commited committed
iab indivudal individual
iab persistant persistent
iab coalecced coalesced
iab mutiple multiple
iab acure occur
iab occures occurs
iab transction transaction
iab trsanction transaction
iab durabilty durability
iab alteres alterers
iab othwise otherwise
iab othrwise otherwise
iab lenght length
iab lengh length
iab halvf half
iab namepsace namespace
iab reutrn return
iab sucessor successor
iab changess changes
iab gatter gather
iab scather scatter
iab Completly Completely
iab completly completely
iab pidgeons pigeons
iab occopies occupies
iab Miliseconds Milliseconds
iab miliseconds milliseconds
iab exersize exercise
iab receave receive
iab algoritm algorithm
iab propigate propagate
iab potentily potentially
iab everythin everything
iab greather greater
iab optomizations optimizations
iab optomization optimization
iab referernce reference
iab manny many
iab aight eight
iab outherwise otherwise
iab symantics semantics
iab resutl result
iab isntead instead
iab ambigous ambiguous
iab Concensus Consensus
iab concensus consensus
iab exlusivly exclusively
iab eachother each other
iab heigh height
iab heigth height
iab useing using
iab collission collision
iab handleing handling
iab seaerching searching
iab responsiblity responsibility
iab supossed supposed
iab deapth depth
iab beahvior behaviour
iab realying relaying
iab exclusivly exclusively
iab whith with
iab reslease release
iab theire their
iab thier their
iab Investiaged Investigated
iab investiaged investigated
iab decentrialized decentralized
iab intrest interest
iab instreast interest
iab intresting interesting
iab effecivly effectively
iab wil will
iab experiance experiance
iab develping developing
iab greate great
iab considor consider
iab abbeility ability
iab algorihms algorithms
iab postion postion
iab avialable available
iab moddeling modelling
iab curomstances circumstances
iab expirement experiment
iab toughts toughs
iab effectivly effectively
iab considuration consideration
iab clousre closure
iab createing creating
iab resullt result
iab wether whether
iab optimaize optimize
iab intrested interested
iab excpected expected
iab excpect expect
iab Allways Always
iab usuable useable
iab independant independent
iab generaly generally
iab rentrant re-entrant
iab interuptable interruptible
iab postion position
iab sapce space
iab utilazing utilizing
iab beeing being
iab developmeant development
iab companines companies
iab mehtologies methodologies 
iab problmes problems

iab Acsending Ascending
iab acsending ascending
iab Asending Ascending
iab asending ascending
iab Acending Ascending
iab acending ascending

iab Decsending Descending
iab decsending descending
iab Desending Descending
iab desending descending
iab Decending Descending
iab decending descending

" TODO maybe limit to ft=cpp
iab sizoef sizeof
iab deinfe define
iab memst memset
iab szie_t size_t
iab stati static
iab uint8 uint8_t
iab uint16 uint16_t
iab uint32 uint32_t
iab uint64 uint64_t
iab cosnt const
iab asssert assert
iab treu true
iab pritnf printf

" iab nullpt nullptr
" iab nullp nullptr
" iab null nullptr
" }}}

set nowrap                        " do not soft wrap long lines
set backspace=indent,eol,start    " allow backspacing over everything in insert mode
set autoread                      " auto reload after outside changes(tmux sends a event on focus)

" Tab {{{
set tabstop=2                     " Number of spaces to represent a <TAB> character from file
set expandtab                     " <tab> is converted to spaces
set shiftwidth=2                  " number of spaces to use for autoindenting
set smarttab                      " insert tabs on the start of a line according
                                  " to shiftwidth, not tabstop
" }}}

" Indentation {{{
set autoindent                    " use the same indent from current line when starting a new line
set copyindent                    " use the same character(tabs,spaces...) for indentation as the previous line
set smartindent                   " support auto indentation when for example the previous line end with { used for (c/c++)
" }}}

" tmp directories {{{
if has("win32")
else
  if !isdirectory("/tmp/.vim")
    call mkdir("/tmp/.vim", "", 0777)
  endif

  if !isdirectory("/tmp/.vim/undo")
    call mkdir("/tmp/.vim/undo", "", 0700)
  endif
  if !isdirectory("/tmp/.vim/swap")
    call mkdir("/tmp/.vim/swap", "", 0700)
  endif
  if !isdirectory("/tmp/.vim/backup")
    call mkdir("/tmp/.vim/backup", "", 0700)
  endif
endif
" }}}

" Backup {{{
set nobackup            " no bak
" set backup
" pointles to backup to /tmp?
" set backupdir=/tmp/.vim/backup//
" set backupskip=/tmp/*,~/tmp
" set writebackup
" }}}

" Swap lock files {{{
if has("win32")
  set noswapfile          " no swap
else
  set swapfile
  " two slashes means that vim will create unique swap file names per file
  set directory=/tmp/.vim/swap//
endif
" }}}

" Undo {{{
" https://advancedweb.hu/2017/09/12/vim-using-undo-branches
set undolevels=1000               " Use many levels of undo
set undofile                      " File Persistent undo
set undodir=/tmp/.vim/undo//      " Store undo file in tmp directory
" }}}

" Custom mappings {{{
" Alternative save
nnoremap <silent> <leader>w <esc>:wa<CR>
" Alternative quit
nnoremap <silent> <leader>q <esc>:q<CR>

map <silent> <leader>, <esc>:noh<CR>

" resize split
map <silent> <leader>- <esc>:vertical resize -5<CR>
map <silent> <leader>+ <esc>:vertical resize +5<CR>

" Alternative Moving around splits with the leader key
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>

" Create vertical pane
nnoremap <leader>s <esc>:vnew<CR>
" Create horizontal pane
" nnoremap <leader>h <esc>:sp<CR>
" Create tab
nnoremap <silent><leader>e <esc>:tabedit<CR>

" new line above and below without entering insert mode
map <silent> <leader>o o<esc>
map <silent> <leader>O O<esc>

" map <silent> <leader>o o<C-U><esc>
" map <silent> <leader>O O<C-U><esc>

" half page down/up
map <silent> ö <C-D>
map <silent> Ö <C-U>
"
" page up/down
map <silent> å <PageUp>
map <silent> ä <PageDown>

" pane navigation
map <silent> <leader>1 <esc>1gt
map <silent> <leader>2 <esc>2gt
map <silent> <leader>3 <esc>3gt
map <silent> <leader>4 <esc>4gt
map <silent> <leader>5 <esc>5gt
map <silent> <leader>6 <esc>6gt
map <silent> <leader>7 <esc>7gt
map <silent> <leader>8 <esc>8gt
map <silent> <leader>9 <esc>9gt

" behave similar to D
noremap Y y$
"
" Navigation captial H/L goto extreme Right/Left
noremap H _
noremap L g_

nnoremap <CR> :
vnoremap <CR> :

" Replay macro
noremap Q @q

" }}}

" jumplist {{{
" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 3 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 3 ? "m'" . v:count : '') . 'j'

nnoremap <expr> + (v:count > 3 ? "m'" . v:count : '') . '+'
nnoremap <expr> - (v:count > 3 ? "m'" . v:count : '') . '-'
" }}}

" Disable Mappings {{{

" Arrow keys
" nnoremap <left> <nop>
" nnoremap <right> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>

" inoremap <left> <nop>
" inoremap <right> <nop>
" inoremap <up> <nop>
" inoremap <down> <nop>

" disable f1 help
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" disable man
map <S-k> <Nop>

" Avoid unintentional switches to Ex mode.
nnoremap Q <nop>

" Stop that stupid window from popping up
nmap q: <esc>:q

" remember both line and column with '
nnoremap ' `
nnoremap ` '

"
map + <nop>
map - <nop>

" Keep visual selection during indenting
xnoremap < <gv
xnoremap > >gv|

" }}}

" hexedit {{{
" from :h hex-editing
" xxd is a utility to convert to/from hex - used when opening and closing the
" bin files. when opening a bin file vim will open it for hex editing
augroup BinaryHexEdit
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END
" }}}

" Smooth Scrolling {{{
" from :h scroll-smooth
map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>
" }}}
"
" modeline {{{
set modelines=1   " turn on vim settings that will be read from the last line
" example:
" vim:foldmethod=marker:foldlevel=0
" }}}

" ctags {{{
" ctags - look in the current directory for 'tags',
" and work up the tree towards root until one is found
set tags=./.tags;/

" open tag
" map <silent> <F3> <c-]>
" open tag in vertical split
map <silent> <leader><F3> <a-]>
" previous
" map <silent> <A-Left> <c-t>
" }}}

