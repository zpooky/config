set nocompatible

" if has('vim_starting')
  set fileencoding=utf-8
  scriptencoding utf-8
  set encoding=utf-8 nobomb
" endif

if has('gui_running')
  " configure font and font size for gvim
  set guifont=Consolas:h9
  " a gui pops up allowing you to configure font, size...
  " set guifont=*
endif

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal" || $TERM == "urxvt" || $TERM == "tmux-256color"
  set t_Co=256
endif

"
filetype on                       " Enable file type detection
filetype plugin on                " Enable file type plug-ins
filetype indent plugin on         " file type specific indentation support

" syntax
syntax enable                     " Highlight the syntax.

" folding
" {
set nofoldenable    " disable folding
" }

" gvim - hide all gui
" {
set guioptions=
" }

" pastetoggle - vim will not perform any formatting when toggled on
" {
set pastetoggle=<f5>
" }

" command(:)
set wildmode=longest:full,full   " bash like command(:) completion when tab
set wildmenu                     " Show command(:) completion with tab
" ignore these files when :edit <tab>
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.exe,*.dat,*.bin,*.jar,*.png,*.out,*.pdf,*.cache,*.part,*.zip,*.tar,*.tar.gz,*.so,*.gif

" Blank charcters
" {
" note: 
" debug set with "set list?" ?: means print current value
set list                              " show special chars, such as tab: eol: trail: extends: nbsp:
" chars to show for blank characters
set listchars=tab:·»
set listchars+=eol:¬
set listchars+=trail:·
" set showbreak=↪\                    " useful indication of wrapping
set showbreak="\u21aa "
" }

" Undo
" {
set undolevels=1000      " Use many levels of undo
set undofile             " Persisten undo
set undodir=$TEMP        " Undo file in tmp directory
" }

" General
" {
if !has('win32unix') && !has('win64unix')
  " does not work in cygwin
  set ttyfast                      " Faster redraw
endif
" don't bother updating screen during macro playback
set lazyredraw
set showcmd                      " Show incomplete vim motions as I type
let mapleader = "\<Space>"        " map leader to  <space>
set relativenumber                " relative line numbers
set number                        " both relative and absolute number
" set mouse=a                       " Enables scrolling terminal.(mouse mode)
" }

" Highlight current line
" Enable cursorline only on the active buffer
augroup CursorLine
    "https://stackoverflow.com/a/12018552
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

"
au BufNewFile,BufFilePre,BufRead *.md set ft=markdown
au BufNewFile,BufRead *.nasm set ft=nasm
au FileType markdown,python set ts=2 sw=2 expandtab

" c++
autocmd BufRead,BufNewFile /usr/include/c++/* set syntax=cpp

" Search
" {{{
set incsearch                     " search wile you type
set smartcase                     " Case insensitive search, except when capital letters are used.
set ignorecase                    " ignore case when searching
set hls                           " highligt search?
" }}}

" Spell
" {{{
map <leader>ss :setlocal spell!<CR>
map <leader>sn ]s
map <leader>sp [s
" map <leader>sa zg
map <leader>sq z=

" underline wrongly spelled words
hi clear SpellBad
hi SpellBad cterm=underline

set spelllang=en_gb               " Specify the spell checking language.
set nospell                       " Disable spell checking by default.
set dictionary+=/usr/share/dict/words
au FileType gitcommit,markdown,text,mail set textwidth=80
au FileType gitcommit,markdown,text,mail set colorcolumn=-1 " display bar at textwidth
au FileType gitcommit,markdown,text,mail set complete+=kspell
au FileType gitcommit,mail set spell             " enable spelling for these types

abbreviate teh the
abbreviate fro for
abbreviate utillity utility
"
" open new pane to the right 
set splitright

" }}}

set nowrap                        " don't wrap lines
set backspace=indent,eol,start    " allow backspacing over everything in insert mode
set shiftwidth=2                  " number of spaces to use for autoindenting
set smarttab                      " insert tabs on the start of a line according
                                  " to shiftwidth, not tabstop
"
set ruler                         " Display the ruler
" Tab config
set tabstop=2
set shiftwidth=2
set expandtab                     " when emitting tab convert to space

" Indentation
" {
set autoindent                    " always set autoindenting on
set copyindent                    " copy the previous indentation on autoindenting
set smartindent                   " smart indentation
" }

" Mappings
" {

" Alternative save
nnoremap <silent> <leader>w <esc>:wa<CR>
" Alternative quit
nnoremap <silent> <leader>q <esc>:q<CR>
" map å to page up
map <silent> å <PageUp>
" map ä to page down
map <silent> ä <PageDown>

map <silent> <leader>, <esc>:noh<CR>

" resize split
map <silent> <leader>- <esc>:vertical resize -5<CR>
map <silent> <leader>+ <esc>:vertical resize +5<CR>

" navigate between splits
" pane Left
map <silent> <leader><Left> <C-W><Left>
" pane Right
map <silent> <leader><Right> <C-W><Right>
" pane Up
map <silent> <leader><Up> <C-W><Up>
" pane Down
map <silent> <leader><Down> <C-W><Down>

" " Alternative Moving around splits with the leader key
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>

" Create vertical pane
nnoremap <leader>s <esc>:vnew<CR>
" Create horizontal pane
" nnoremap <leader>h <esc>:sp<CR>
" Create tab
nnoremap <silent><leader>e <esc>:tabedit<CR>

" new line above and below without entering insert mode
map <silent> <leader>o o<esc>
map <silent> <leader>O O<esc>

" half page down/up
map <silent> ö <C-D>
map <silent> Ö <C-U>

" pane navigation
map <silent> <leader>1 <esc>1gt
map <silent> <leader>2 <esc>2gt
map <silent> <leader>3 <esc>3gt
map <silent> <leader>4 <esc>4gt
map <silent> <leader>5 <esc>5gt
map <silent> <leader>6 <esc>6gt
map <silent> <leader>7 <esc>7gt
map <silent> <leader>8 <esc>8gt
map <silent> <leader>9 <esc>9gt

" behave similar to D
noremap Y y$
"
" Navigation captial H/L goto extreme Right/Left
noremap H _
noremap L g_
" }

" insert character(space+*char*)
" nmap <Space> i_<Esc>r " Need to have another than space it is now the leadr
" nmap <S-Enter> O<Esc>j

set history=1000         " remember more commands and search history
set title                " change the terminal's title

"
set novisualbell         " don't beep
set noerrorbells         " don't beep

"
set nobackup            " no bak
set noswapfile          " no swap
"
set autoread            " auto reload after outside changes

" Get rid of nasty lag on ESC (timeout and ttimeout seem useless) sp??
au InsertEnter * set timeoutlen=1
au InsertLeave * set timeoutlen=1000
set timeoutlen=1000 ttimeoutlen=0

" jumplist
" {
" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 3 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 3 ? "m'" . v:count : '') . 'j'

nnoremap <expr> + (v:count > 3 ? "m'" . v:count : '') . '+'
nnoremap <expr> - (v:count > 3 ? "m'" . v:count : '') . '-'
" }

" Disable Mappings
" {{{
"
" Arrow keys
" nnoremap <left> <nop>
" nnoremap <right> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>

" inoremap <left> <nop>
" inoremap <right> <nop>
" inoremap <up> <nop>
" inoremap <down> <nop>

"disable f1
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

"disable man
map <S-k> <Nop>

" Avoid unintentional switches to Ex mode.
nnoremap Q <nop>

" Stop that stupid window from popping up
map q: <esc>:q

" }}}

" from :h hex-editing
" xxd is a utility to convert to/from hex - used when opening and closing the
" bin files. when opening a bin file vim will open it for hex editing
" {{{
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END
" }}}

" Smooth Scrolling
" from :h scroll-smooth
" {{{
map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>

" }}}
