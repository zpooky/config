set nocompatible

" if has('vim_starting')
  set encoding=utf-8      " The encoding displayed
  set fileencoding=utf-8  " The encoding of the resulting output file
  scriptencoding utf-8
" endif

if has('gui_running')
  " configure font and font size for gvim
  set guifont=Consolas:h9
  " a gui pops up allowing you to configure font, size...
  " set guifont=*
endif

" if $TERM == "xterm-256color"
" endif

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal" || $TERM == "urxvt" || $TERM == "tmux-256color"
  set t_Co=256
  if has('nvim') || has('termguicolors')
    " :h xterm-true-color
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    " :h termguicolors
    " guibg and guifg are defined also in terminal Vim used by colorscheme
    set termguicolors
  endif
endif

if v:version > 703 || v:version == 703 && has('patch541')
  " Fixes joining comment lines
  set formatoptions+=j
endif

"
filetype on                       " Enable file type detection
filetype plugin on                " Enable file type plug-ins
filetype indent plugin on         " file type specific indentation support + loading language indentation specific files

" General {{{
let mapleader = "\<Space>"        " map leader to  <space>
" set mouse=a                     " Enables scrolling terminal.(mouse mode)
set pastetoggle=<f5>              " vim will not perform any formatting when toggled on
" }}}

" UI {{{
set ruler                         " Display the ruler
set showcmd                       " Show incomplete vim motions as I type
set relativenumber                " Relative line numbers
set number                        " Relative + Absolute number
set lazyredraw                    " don't bother updating screen during macro playback
" set showmatch                     " blink matching [{()}] on insert
set title                         " change the terminal's title

set novisualbell                  " don't beep
set noerrorbells                  " don't beep

set splitright                    " open new pane to the right

set scrolloff=5                   " keep at least 5 lines above/below when scrolling

if !has('win32unix') && !has('win64unix')
  " does not work in cygwin
  set ttyfast                     " Faster redraw
endif

" Highlight current line
" Enable cursorline only on the active buffer
augroup AutogroupCursorLine
    "https://stackoverflow.com/a/12018552
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}

" syntax {{{
syntax enable                     " Highlight the syntax.
" }}}

" folding {{{
set nofoldenable                  " disable folding
" }}}

" gvim {{{
" hide all gui
set guioptions=
" }}}

" command(:) {{{
set history=1000                 " remember more commands and search history
set wildmode=longest:full,full   " bash like command(:) completion when tab
set wildmenu                     " Show command(:) completion with tab

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

" ignore these files when :edit <tab>
set wildignore=*.swp,*.bak,*.pyc,*.exe,*.dat,*.bin,*.out,*.pdf,*.cache,*.part
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.d,main,*.o,*.a,*.stackdump,*.so
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=*.class,*.jar
set wildignore+=*.zip,*.tar,*.tar.gz
" set wildignore+=
" }}}


augroup AutogroupRememberFilePosition
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

if has('win32unix') || has('win64unix')
  " https://github.com/mintty/mintty/wiki/Tips
  let &t_ti.="\e[1 q"
  let &t_SI.="\e[5 q"
  let &t_EI.="\e[1 q"
  let &t_te.="\e[0 q"

  let &t_ti.="\e[?7727h"
  let &t_te.="\e[?7727l"
  " noremap <Esc>O[ <Esc>
  " noremap! <Esc>O[ <C-c>

endif

" Get rid of nasty lag on ESC (timeout and ttimeout seem useless) sp??
augroup AutogroupEscapeLag
  autocmd!
  au InsertEnter * set timeoutlen=1
  au InsertLeave * set timeoutlen=1000
augroup END
set timeoutlen=1000 ttimeoutlen=0
" set esckeys " A <esc> is always a <esc> not part a escape sequence(used by older terminals?)

" Blank charcters {{{
" debug set with "set list?" ?: means print current value
set list                              " show special chars, such as tab: eol: trail: extends: nbsp:

" chars to show for blank characters
set listchars=tab:·»
set listchars+=eol:¬
set listchars+=trail:·

" set showbreak=↪\                    " useful indication of wrapping
set showbreak="\u21aa "
" }}}

" {{{
augroup AutogroupFileSpecific
  autocmd!

  " manually set filetype based on ext
  autocmd BufNewFile,BufFilePre,BufRead *.md set ft=markdown
  autocmd BufNewFile,BufRead *.nasm set ft=nasm

  " type specific settings
  autocmd FileType markdown,python set ts=2 sw=2 expandtab
  autocmd FileType gitcommit,markdown,text,mail set textwidth=80
  autocmd FileType gitcommit,markdown,text,mail set colorcolumn=-1   " display bar at textwidth
  autocmd FileType gitcommit,markdown,text,mail set complete+=kspell
  autocmd FileType gitcommit,mail set spell                          " enable spelling for these types

  " set file type for files without extension like <atomic>
  autocmd BufRead,BufNewFile /usr/include/c++/* set syntax=cpp

augroup END
" }}}


" Search {{{
set incsearch                     " search wile you type
set smartcase                     " Case insensitive search, except when capital letters are used.
set ignorecase                    " ignore case when searching
set hlsearch                      " highlight search result
" }}}

" Visual mode {{{
" move up/down by visual line, will treat wrapped lines as real lines
nnoremap j gj
nnoremap k gk
" }}}

" Spell {{{
map <silent><f6> <esc>:setlocal spell!<CR>
map zn ]s
map zp [s
" map <leader>sa zg
" map <leader>sq z=
" Drop down menu with spell corrections
nnoremap <leader>z ea<C-X><C-S>

" underline wrongly spelled words
hi clear SpellBad
hi SpellBad cterm=underline

set spelllang=en_gb               " Specify the spell checking language.
set nospell                       " Disable spell checking by default.
set dictionary+=/usr/share/dict/words

abbreviate teh the
abbreviate wehn when
abbreviate fro for
abbreviate utillity utility
abbreviate allways always
abbreviate highligt highlight
abbreviate allready already
abbreviate exclusve exclusive
abbreviate Exclusve Exclusive
abbreviate Exlcusive Exclusive
abbreviate exclusve exclusive
abbreviate beahviour behaviour
abbreviate autocompleteion autocompletion
abbreviate completeion completion
abbreviate abreviate abbreviate
abbreviate aquire acquire
abbreviate coaless coalesce
abbreviate coalesse coalesce
abbreviate coalessed coalesced
abbreviate coalessce coalesce
abbreviate coalecse coalesce
abbreviate noxcept noexcept
abbreviate probobly probably
abbreviate charactor character
abbreviate paralell parallel
abbreviate itterations iterations
abbreviate itteration iteration
abbreviate itterating iterating
abbreviate refrences references
abbreviate refrence reference
abbreviate dequeing dequeuing
abbreviate fullfill fulfil
abbreviate increse increase
abbreviate nessesary necessary
abbreviate enque enqueue
abbreviate enqued enqueued
abbreviate enquing enqueuing
abbreviate deque dequeue
abbreviate dequed dequeued
abbreviate continuasly continuously
abbreviate controll control
abbreviate haveing having
abbreviate atomicly atomically
abbreviate considure consider
abbreviate recycked recycled
abbreviate apend append
abbreviate keept kept
abbreviate atleast at least
abbreviate defein define
abbreviate asssert assert
abbreviate entrie entry
abbreviate everyting everything
abbreviate invoce invoke
abbreviate invoces invokes
abbreviate lengh length
abbreviate renmae rename
abbreviate routign routing
abbreviate closenes closeness
abbreviate adjasent adjacent
abbreviate sufficent sufficient
abbreviate nessessary necessary
abbreviate refered referred
abbreviate refrenced referenced
abbreviate immediatly immediately
abbreviate timedout timed out
abbreviate desiding deciding
abbreviate exapndable expandable
abbreviate nessesarly necessarily
abbreviate meaining meaning
abbreviate arbritrary arbitrary
abbreviate afer after
abbreviate reclmataion reclamation
abbreviate subsicently subsequently
abbreviate privous previous
abbreviate referecnes references
abbreviate rebalanceing rebalancing
abbreviate thresshold threshold
abbreviate staticts statistics
abbreviate aggreeing agreeing
abbreviate prefere prefer
abbreviate bootstraping bootstrapping
abbreviate malicous malicious
abbreviate wich which
abbreviate alot allot
abbreviate interfereing interfering
abbreviate changeing changing
abbreviate anounce announce
abbreviate recurivly recursively
abbreviate recursivly recursively
abbreviate uppwards upwards
abbreviate prinf printf
abbreviate compatability compatibility
abbreviate sizoef sizeof
abbreviate explict explicit
abbreviate recurisvly recursively
abbreviate hegiher higher
abbreviate heigher higher
abbreviate rebalnce rebalance
abbreviate namesapce namespace
abbreviate algoithm algorithm
abbreviate recuirsive recursive
abbreviate ranomize randomize

" }}}

set nowrap                        " do not wrap long lines
set backspace=indent,eol,start    " allow backspacing over everything in insert mode
set autoread                      " auto reload after outside changes

" Tab {{{
set tabstop=2                     " Number of spaces to represent a <TAB> character from file
set expandtab                     " <tab> is converted to spaces
set shiftwidth=2                  " number of spaces to use for autoindenting
set smarttab                      " insert tabs on the start of a line according
                                  " to shiftwidth, not tabstop
" }}}

" Indentation {{{
set autoindent                    " always set autoindenting on
set copyindent                    " copy the previous indentation on autoindenting
set smartindent                   " smart indentation
" }}}

" tmp directories {{{
if has("win32")
else
  if !isdirectory("/tmp/.vim")
    call mkdir("/tmp/.vim", "", 0777)
  endif

  if !isdirectory("/tmp/.vim/undo")
    call mkdir("/tmp/.vim/undo", "", 0700)
  endif
  if !isdirectory("/tmp/.vim/swap")
    call mkdir("/tmp/.vim/swap", "", 0700)
  endif
  if !isdirectory("/tmp/.vim/backup")
    call mkdir("/tmp/.vim/backup", "", 0700)
  endif
endif
" }}}

" Backup {{{
set nobackup            " no bak
" set backup
" pointles to backup to /tmp?
" set backupdir=/tmp/.vim/backup//
" set backupskip=/tmp/*,~/tmp
" set writebackup
" }}}

" Swap lock files {{{
if has("win32")
  set noswapfile          " no swap
else
  set swapfile
  " two slashes means that vim will create unique swap file names per file
  set directory=/tmp/.vim/swap//
endif
" }}}

" Undo {{{
" https://advancedweb.hu/2017/09/12/vim-using-undo-branches
set undolevels=1000               " Use many levels of undo
set undofile                      " File Persistent undo
set undodir=/tmp/.vim/undo//      " Store undo file in tmp directory
" }}}

" Custom mappings {{{
" Alternative save
nnoremap <silent> <leader>w <esc>:wa<CR>
" Alternative quit
nnoremap <silent> <leader>q <esc>:q<CR>

map <silent> <leader>, <esc>:noh<CR>

" resize split
map <silent> <leader>- <esc>:vertical resize -5<CR>
map <silent> <leader>+ <esc>:vertical resize +5<CR>

" Alternative Moving around splits with the leader key
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>

" Create vertical pane
nnoremap <leader>s <esc>:vnew<CR>
" Create horizontal pane
" nnoremap <leader>h <esc>:sp<CR>
" Create tab
nnoremap <silent><leader>e <esc>:tabedit<CR>

" new line above and below without entering insert mode
map <silent> <leader>o o<esc>
map <silent> <leader>O O<esc>

" half page down/up
map <silent> ö <C-D>
map <silent> Ö <C-U>
"
" page up/down
map <silent> å <PageUp>
map <silent> ä <PageDown>

" pane navigation
map <silent> <leader>1 <esc>1gt
map <silent> <leader>2 <esc>2gt
map <silent> <leader>3 <esc>3gt
map <silent> <leader>4 <esc>4gt
map <silent> <leader>5 <esc>5gt
map <silent> <leader>6 <esc>6gt
map <silent> <leader>7 <esc>7gt
map <silent> <leader>8 <esc>8gt
map <silent> <leader>9 <esc>9gt

" behave similar to D
noremap Y y$
"
" Navigation captial H/L goto extreme Right/Left
noremap H _
noremap L g_

nnoremap <CR> :
vnoremap <CR> :

" Replay macro
noremap Q @q

" }}}

" jumplist {{{
" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 3 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 3 ? "m'" . v:count : '') . 'j'

nnoremap <expr> + (v:count > 3 ? "m'" . v:count : '') . '+'
nnoremap <expr> - (v:count > 3 ? "m'" . v:count : '') . '-'
" }}}

" Disable Mappings {{{

" Arrow keys
" nnoremap <left> <nop>
" nnoremap <right> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>

" inoremap <left> <nop>
" inoremap <right> <nop>
" inoremap <up> <nop>
" inoremap <down> <nop>

" disable f1 help
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" disable man
map <S-k> <Nop>

" Avoid unintentional switches to Ex mode.
nnoremap Q <nop>

" Stop that stupid window from popping up
nmap q: <esc>:q

nnoremap ' `
nnoremap ` '

"
map + <nop>
map - <nop>

" Keep visual selection during indenting
xnoremap < <gv
xnoremap > >gv|

" }}}

" hexedit {{{
" from :h hex-editing
" xxd is a utility to convert to/from hex - used when opening and closing the
" bin files. when opening a bin file vim will open it for hex editing
augroup BinaryHexEdit
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END
" }}}

" Smooth Scrolling {{{
" from :h scroll-smooth
map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>
" }}}
"
" modeline {{{
set modelines=1   " turn on vim settings that will be read from the last line
" example:
" vim:foldmethod=marker:foldlevel=0
" }}}
